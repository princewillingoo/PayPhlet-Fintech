// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URI")
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  name            String
  password        String
  phoneNumber     String    @unique @map("phone_number")
  rememberToken   String?   @map("remember_token")
  isEmailVerified Boolean   @default(false) @map("is_email_verified")
  emailVerifiedAt DateTime? @map("email_verified_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  Invoice  Invoice[]
  Customer Customer[]
  Payment  Payment[]

  Business Business?

  @@map("users")
}

model Business {
  id           String   @id @default(uuid())
  name         String   @unique
  email        String   @unique
  phoneNumber  String   @map("phone_number") // @unique 
  addressLine1 String   @map("address_line1")
  addressLine2 String?  @map("address_line2")
  city         String
  state        String
  country      String
  bankName     String?  @map("bank_name")
  accountNo    String?  @unique @map("account_no")
  accountName  String?  @map("account_name")
  qrCodeData   String?  @unique @map("qr_code_data")
  qrCode       String?  @unique @map("qr_code")
  notes        String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  User   User   @relation(fields: [userId], references: [id])
  userId String @unique

  @@map("business")
}

model Customer {
  id           String   @id @default(uuid())
  email        String   @unique
  phoneNumber  String?  @unique @map("phone_number")
  addressLine1 String?  @map("address_line1")
  addressLine2 String?  @map("address_line2")
  city         String?
  State        String?
  country      String?
  notes        String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  Invoice Invoice[]

  User   User   @relation(fields: [userId], references: [id])
  userId String @map(name: "user_id")

  @@map("customers")
}

model Invoice {
  id              String         @id @default(uuid()) @map(name: "id")
  invoiceDueDate  DateTime       @map(name: "invoice_due_date")
  invoiceSubject  String         @map(name: "invoice_subject")
  invoiceNote     String?        @default("Thanks for your patronage") @map(name: "invoice_note")
  invoiceVat      Float          @default(0.00) @map(name: "invoice_vat")
  invoiceDiscount String         @default("0%") @map(name: "invoice_discount%")
  paymentMethod   PaymentMethod? @map(name: "payment_method")
  invoiceNumber   String         @map(name: "invoice_number")
  invoiceTotal    Float          @map(name: "invoice_total")
  status          InvoiceStatus  @default(DRAFT) @map(name: "status")
  createdAt       DateTime       @default(now()) @map(name: "created_at")
  updatedAt       DateTime       @updatedAt @map(name: "updated_at")

  User   User   @relation(fields: [userId], references: [id])
  userId String @map(name: "user_id")

  Customer   Customer @relation(fields: [customerId], references: [id])
  customerId String   @map(name: "customer_id")

  Payment Payment?

  InvoiceItems InvoiceItem[]

  @@map("invoices")
}

model InvoiceItem {
  id              String   @id @default(uuid()) @map(name: "id")
  description     String   @map(name: "description")
  quantity        Int      @map(name: "quantity")
  unitCost        Float    @map(name: "unit_cost")
  vat             String   @default("0%") @map(name: "vat")
  subTotal        Float    @default(0.00) @map(name: "sub_total")
  subTotalPlusVat Float    @default(0.00) @map("sub_total_plus_vat")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  Invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId String  @map(name: "invoice_id")

  @@map("invoice_items")
}

model Payment {
  id        String        @id @default(uuid())
  amount    Float         @map("amount")
  paymentId String        @unique @map("payment_id")
  paid      Boolean       @default(false) @map("paid")
  channel   PaymentMethod @map("channel")
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  User   User   @relation(fields: [userId], references: [id])
  userId String

  Invoice   Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId String  @unique
}

enum PaymentMethod {
  USSD
  MOBILE
  CARD
  CASH
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  PENDING
}
